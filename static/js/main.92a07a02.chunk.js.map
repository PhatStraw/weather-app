{"version":3,"sources":["components/geolocation.js","components/form.js","components/weatherForecast.js","App.js","index.js"],"names":["Form","onSubmit","this","props","getWeather","type","name","placeholder","Component","WeatherForecast","className","city","country","humidity","description","temperature","error","REACT_APP_WEATHER_API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","apiCall","json","data","console","log","setState","main","temp","sys","weather","ReactDOM","render","document","getElementById"],"mappings":"oRAEA,ICCqBA,E,iLAEb,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,YAC3B,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,oD,GANsBC,aCDbC,E,iLAEb,OACI,yBAAKC,UAAU,iBAEPR,KAAKC,MAAMQ,MAAQT,KAAKC,MAAMS,SAAW,uBAAGF,UAAU,gBAAb,aAAsC,8BAAOR,KAAKC,MAAMQ,KAAlB,KAA0BT,KAAKC,MAAMS,UAIpHV,KAAKC,MAAMU,UAAY,uBAAGH,UAAU,gBAAb,aAAsC,8BAAOR,KAAKC,MAAMU,WAI/EX,KAAKC,MAAMW,aAAe,uBAAGJ,UAAU,gBAAb,eAAwC,8BAAOR,KAAKC,MAAMW,cAIpFZ,KAAKC,MAAMY,aAAe,uBAAGL,UAAU,gBAAb,gBAAyC,8BAAOR,KAAKC,MAAMY,cAIrFb,KAAKC,MAAMa,OAAS,qCAAU,8BAAOd,KAAKC,MAAMa,a,GArBvBR,aCIvCS,EAA0B,mCACXC,E,2MACnBC,MAAO,CACLJ,iBAAaK,EACbT,UAAMS,EACNR,aAASQ,EACTP,cAAUO,EACVN,iBAAaM,EACbJ,WAAOI,G,EAGThB,W,uCAAa,WAAMiB,GAAN,qBAAAC,EAAA,6DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAH/B,SAIWC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,kBAJhB,cAILW,EAJK,gBAKQA,EAAQC,OALhB,OAKLC,EALK,OAMRnB,GAAQC,GACTmB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZlB,YAAae,EAAKI,KAAKC,KACzBxB,KAAMmB,EAAKxB,KACXM,QAASkB,EAAKM,IAAIxB,QAClBC,SAAUiB,EAAKI,KAAKrB,SACpBC,YAAagB,EAAKO,QAAQ,GAAGvB,YAC7BE,MAAO,MAGP,EAAKiB,SAAS,CACZlB,iBAAaK,EACfT,UAAMS,EACNR,aAASQ,EACTP,cAAUO,EACVN,iBAAaM,EACbJ,MAAO,4BAvBE,4C,8HA4BX,OACE,yBAAKN,UAAU,OACd,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACZ,yBAAKA,UAAU,4BACb,kBAAC,EAAD,CAAMN,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACEW,YAAab,KAAKiB,MAAMJ,YACxBJ,KAAMT,KAAKiB,MAAMR,KACjBC,QAASV,KAAKiB,MAAMP,QACpBC,SAAUX,KAAKiB,MAAMN,SACrBC,YAAaZ,KAAKiB,MAAML,YACxBE,MAAOd,KAAKiB,MAAMH,kB,GApDLR,aCDjC8B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.92a07a02.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nconst GeoLocation = () => {\n    const [position, setPosition] = useState({})\n    const [error, setError] = useState(null)\n\n    const onChange = ({coords}) => {\n        setPosition({\n          latitude: coords.latitude,\n          longitude: coords.longitude,\n        });\n      };\n    const onError = (error) => {\n        setError(error.message);\n      };\n\n    useEffect(() => {\n        const geo = navigator.geolocation;\n        if (!geo) {\n          setError('Geolocation is not supported');\n          return;\n        }\n        let watcher = geo.watchPosition(onChange, onError);\n        return () => geo.clearWatch(watcher);\n    }, []);\n\n    return {...position, error};\n}\nexport default GeoLocation","import React, { Component } from 'react'\n\n\nexport default class Form extends Component{\n    render(){\n        return(\n            <form onSubmit={this.props.getWeather}>\n            <input type=\"text\" name=\"city\" placeholder=\"City\" />\n            <input type=\"text\" name=\"country\" placeholder=\"Country\" />\n            <button >Get Weather</button>\n            </form>\n        )\n    }\n}","import React, {Component} from 'react'\n\nexport default class WeatherForecast extends Component{\n    render(){\n        return(\n            <div className=\"weather__info\">\n                {\n                    this.props.city && this.props.country && <p className=\"weather__key\">Location: <span>{this.props.city}, {this.props.country}</span></p>  \n                }\n\n                {\n                    this.props.humidity && <p className=\"weather__key\">Humidity: <span>{this.props.humidity}</span></p>  \n                }\n\n                {\n                    this.props.description && <p className=\"weather__key\">Conditions: <span>{this.props.description}</span></p> \n                }\n\n                {\n                    this.props.temperature && <p className=\"weather__key\">Temperature: <span>{this.props.temperature}</span></p>\n                }\n\n                {\n                    this.props.error && <p>Error: <span>{this.props.error}</span></p>\n                }\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\nimport GeoLocation from './components/geolocation.js'\nimport Form from './components/form.js'\nimport WeatherForecast from './components/weatherForecast.js'\nimport './App.css';\n\nconst REACT_APP_WEATHER_API_KEY=\"28ccc8212815bf01425b9246846753f0\"\nexport default class App extends Component{\n  state ={\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async(e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n    const apiCall = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${REACT_APP_WEATHER_API_KEY}&units=metric`)\n    const data = await apiCall.json()\n    if(city && country){\n      console.log(data)\n      this.setState({\n        temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error: ''\n      })\n    } else {\n      this.setState({\n        temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: 'please enter the values'\n      })\n    }\n}\n  render(){\n    return (\n      <div className=\"App\">\n       <div className=\"wrapper\">\n         <div className=\"main\">\n           <div className=\"container\">\n             <div className=\"row\">\n                <div className=\"col-xs-11 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <WeatherForecast \n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n             </div>\n           </div>\n         </div>\n       </div>\n      </div>\n    );\n  }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}